// <auto-generated />
using System;
using AIDotNet.API.Service.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIDotNet.API.Service.Migrations.Master
{
    [DbContext(typeof(AIDotNetDbContext))]
    partial class AIDotNetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("AIDotNet.API.Service.Domain.ChatChannel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ControlAutomatically")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Models")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Other")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quota")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ResponseTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("Name");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("AIDotNet.API.Service.Domain.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AIDotNet.API.Service.Domain.ProductPurchaseRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PurchaseTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.HasIndex("UserId");

                    b.ToTable("ProductPurchaseRecords");
                });

            modelBuilder.Entity("AIDotNet.API.Service.Domain.RedeemCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Quota")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RedeemedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("RedeemedUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RedeemedUserName")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("RedeemCodes");
                });

            modelBuilder.Entity("AIDotNet.API.Service.Domain.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Private")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Key = "Setting:GeneralSetting:RechargeAddress",
                            Description = "充值地址",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:ChatLink",
                            Description = "对话链接",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:NewUserQuota",
                            Description = "新用户初始额度",
                            Private = true,
                            Value = "100000"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:RequestQuota",
                            Description = "请求预扣额度",
                            Private = true,
                            Value = "2000"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:InviteQuota",
                            Description = "邀请奖励额度",
                            Private = true,
                            Value = "100000"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:EnableClearLog",
                            Description = "启用定时清理日志",
                            Private = true,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:IntervalDays",
                            Description = "间隔天数",
                            Private = true,
                            Value = "90"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:EnableAutoCheckChannel",
                            Description = "启用自动检测渠道策略",
                            Private = true,
                            Value = "false"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:CheckInterval",
                            Description = "检测间隔 (分钟)",
                            Private = true,
                            Value = "60"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AutoDisableChannel",
                            Description = "自动禁用异常渠道",
                            Private = true,
                            Value = "false"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:ModelPromptRate",
                            Description = "模型倍率Prompt",
                            Private = true,
                            Value = "{ \"360GPT_S2_V9\": 0.8572, \"BLOOMZ-7B\": 0.284, \"Baichuan2-53B\": 1.42, \"Baichuan2-Turbo\": 0.568, \"Baichuan2-Turbo-192k\": 1.136, \"ChatPro\": 7.1, \"ChatStd\": 0.71, \"ERNIE-3.5-4K-0205\": 0.852, \"ERNIE-3.5-8K\": 0.852, \"ERNIE-3.5-8K-0205\": 1.704, \"ERNIE-3.5-8K-1222\": 0.852, \"ERNIE-4.0-8K\": 8.52, \"ERNIE-Bot\": 0.8572, \"ERNIE-Bot-4\": 8.572, \"ERNIE-Bot-8K\": 1.704, \"ERNIE-Bot-8k\": 1.704, \"ERNIE-Bot-turbo\": 0.5715, \"ERNIE-Lite-8K-0308\": 0.213, \"ERNIE-Lite-8K-0922\": 0.568, \"ERNIE-Speed-128K\": 0.284, \"ERNIE-Speed-8K\": 0.284, \"ERNIE-Tiny-8K\": 0.071, \"Embedding-V1\": 0.1429, \"PaLM-2\": 1, \"SparkDesk\": 1.2858, \"SparkDesk-v1.1\": 1.2858, \"SparkDesk-v2.1\": 1.2858, \"SparkDesk-v3.1\": 1.2858, \"SparkDesk-v3.5\": 1.2858, \"abab5.5-chat\": 1.065, \"abab5.5s-chat\": 0.355, \"abab6-chat\": 7.1, \"ada\": 10, \"ali-stable-diffusion-v1.5\": 8, \"ali-stable-diffusion-xl\": 8, \"babbage\": 10, \"babbage-002\": 0.2, \"bge-large-8k\": 0.142, \"bge-large-en\": 0.142, \"bge-large-zh\": 0.142, \"chatglm_lite\": 0.1429, \"chatglm_pro\": 0.7143, \"chatglm_std\": 0.3572, \"chatglm_turbo\": 0.3572, \"claude-2\": 5.51, \"claude-2.0\": 5.51, \"claude-2.1\": 5.51, \"claude-3-haiku-20240307\": 0.125, \"claude-3-opus-20240229\": 15, \"claude-3-sonnet-20240229\": 5, \"claude-instant-1\": 0.815, \"claude-instant-1.2\": 0.4, \"code-davinci-edit-001\": 10, \"cogview-3\": 17.75, \"curie\": 10, \"dall-e-2\": 8, \"dall-e-3\": 20, \"davinci\": 10, \"davinci-002\": 1, \"embedding-2\": 0.0355, \"embedding-bert-512-v1\": 0.0715, \"embedding_s1_v1\": 0.0715, \"gemini-1.0-pro-001\": 1, \"gemini-1.0-pro-vision-001\": 1, \"gemini-1.5-pro\": 1, \"gemini-pro\": 1, \"gemini-pro-vision\": 1, \"gemma-7b-it\": 0.05, \"glm-3-turbo\": 0.355, \"glm-4\": 7.1, \"glm-4v\": 7.1, \"gpt-3.5-turbo\": 0.25, \"gpt-3.5-turbo-0125\": 0.25, \"gpt-3.5-turbo-0301\": 0.75, \"gpt-3.5-turbo-0613\": 0.75, \"gpt-3.5-turbo-1106\": 0.75, \"gpt-3.5-turbo-16k\": 1.5, \"gpt-3.5-turbo-16k-0613\": 1.5, \"gpt-3.5-turbo-instruct\": 0.75, \"gpt-4\": 15, \"gpt-4-0125-preview\": 5, \"gpt-4-0314\": 15, \"gpt-4-0613\": 15, \"gpt-4-1106-preview\": 5, \"gpt-4-turbo-2024-04-09\": 5, \"gpt-4-32k\": 30, \"gpt-4-32k-0314\": 30, \"gpt-4-32k-0613\": 30, \"gpt-4-all\": 15, \"gpt-4-gizmo-*\": 15, \"gpt-4-turbo-preview\": 5, \"gpt-4-vision-preview\": 5, \"hunyuan\": 7.143, \"llama2-70b-4096\": 0.35, \"llama2-7b-2048\": 0.05, \"mistral-embed\": 0.05, \"mistral-large-latest\": 4, \"mistral-medium-latest\": 1.35, \"mistral-small-latest\": 1, \"mixtral-8x7b-32768\": 0.135, \"moonshot-v1-128k\": 4.26, \"moonshot-v1-32k\": 1.704, \"moonshot-v1-8k\": 0.852, \"open-mistral-7b\": 0.125, \"open-mixtral-8x7b\": 0.35, \"qwen-max\": 1.4286, \"qwen-max-longcontext\": 1.4286, \"qwen-plus\": 1.4286, \"qwen-turbo\": 0.5715, \"search-serper\": 0.00001, \"semantic_similarity_s1_v1\": 0.0715, \"step-1-200k\": 10.65, \"step-1-32k\": 1.704, \"step-1v-32k\": 1.704, \"tao-8k\": 0.142, \"text-ada-001\": 0.2, \"text-babbage-001\": 0.25, \"text-curie-001\": 1, \"text-davinci-002\": 10, \"text-davinci-003\": 10, \"text-davinci-edit-001\": 10, \"text-embedding-3-large\": 0.065, \"text-embedding-3-small\": 0.5, \"text-embedding-ada-002\": 0.1, \"text-embedding-v1\": 0.05, \"text-moderation-latest\": 0.1, \"text-moderation-stable\": 0.1, \"text-search-ada-doc-001\": 10, \"tts-1\": 7.5, \"tts-1-1106\": 7.5, \"tts-1-hd\": 15, \"tts-1-hd-1106\": 15, \"wanx-v1\": 8, \"whisper-1\": 15, \"yi-34b-chat-0205\": 0.1775, \"yi-34b-chat-200k\": 0.852, \"yi-vl-plus\": 0.426, \"llama3:8b\": 1, \"llama3:70b\": 1 }"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:ModelCompletionRate",
                            Description = "模型倍率Completion",
                            Private = true,
                            Value = "{}"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayNotifyUrl",
                            Description = "支付宝支付回调地址",
                            Private = false,
                            Value = "https://您的服务器地址/"
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayAppId",
                            Description = "支付宝应用APPID",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayPrivateKey",
                            Description = "支付宝应用私钥",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayPublicKey",
                            Description = "支付宝公钥",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayAppCertPath",
                            Description = "支付宝AppCertPath",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayRootCertPath",
                            Description = "支付宝AlipayRootCertPath",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:GeneralSetting:AlipayPublicCertPath",
                            Description = "支付宝公钥证书路径",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:ServerAddress",
                            Description = "服务器地址",
                            Private = false,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableRegister",
                            Description = "启用账号注册",
                            Private = false,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:EnableGithubLogin",
                            Description = "允许Github登录",
                            Private = false,
                            Value = "true"
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GithubClientId",
                            Description = "Github Client Id",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:SystemSetting:GithubClientSecret",
                            Description = "Github Client Secret",
                            Private = true,
                            Value = ""
                        },
                        new
                        {
                            Key = "Setting:OtherSetting:WebTitle",
                            Description = "网站标题",
                            Private = false,
                            Value = "AIDtoNet API"
                        },
                        new
                        {
                            Key = "Setting:OtherSetting:WebLogo",
                            Description = "网站Logo地址",
                            Private = false,
                            Value = "/logo.png"
                        },
                        new
                        {
                            Key = "Setting:OtherSetting:IndexContent",
                            Description = "首页内容",
                            Private = false,
                            Value = "AI DotNet API 提供更强的兼容，将更多的AI平台接入到AI DotNet API中，让AI集成更加简单。"
                        });
                });

            modelBuilder.Entity("AIDotNet.API.Service.Domain.Token", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AccessedTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Disabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(42)
                        .HasColumnType("TEXT");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RemainQuota")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UnlimitedExpired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UnlimitedQuota")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("UsedQuota")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Creator");

                    b.ToTable("Tokens");

                    b.HasData(
                        new
                        {
                            Id = 9999L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creator = "72e8703c-6dea-466c-82aa-7e0b85d04618",
                            Disabled = false,
                            IsDelete = false,
                            Key = "sk-gkT0IZkGclTdAqZVZuOhgCEtCjapsQl37UiS3z",
                            Name = "默认Token",
                            RemainQuota = 0L,
                            UnlimitedExpired = true,
                            UnlimitedQuota = true,
                            UsedQuota = 0L
                        });
                });

            modelBuilder.Entity("AIDotNet.API.Service.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<long>("ConsumeToken")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Creator")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Modifier")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHas")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("RequestCount")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ResidualCredit")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "72e8703c-6dea-466c-82aa-7e0b85d04618",
                            ConsumeToken = 0L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "239573049@qq.com",
                            IsDelete = false,
                            IsDisabled = false,
                            Password = "654b09708742ad11ad1eee4e43fd84f1",
                            PasswordHas = "9d80d1d43cf14a17bcf052a2da79e5cf",
                            RequestCount = 0L,
                            ResidualCredit = 10000000L,
                            Role = "admin",
                            UserName = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
